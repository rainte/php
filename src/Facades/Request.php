<?php

namespace Rainte\PHP\Facades;

/**
 * @method initialize(array $query = [], array $request = [], array $attributes = [], array $cookies = [], array $files = [], array $server = [], $content = null)
 * @method static static createFromGlobals()
 * @method static static create(string $uri, string $method = "GET", array $parameters = [], array $cookies = [], array $files = [], array $server = [], $content = null)
 * @method static setFactory(?callable $callable)
 * @method static duplicate(?array $query = null, ?array $request = null, ?array $attributes = null, ?array $cookies = null, ?array $files = null, ?array $server = null)
 * @method __clone()
 * @method string __toString()
 * @method overrideGlobals()
 * @method static setTrustedProxies(array $proxies, int $trustedHeaderSet)
 * @method static array getTrustedProxies()
 * @method static int getTrustedHeaderSet()
 * @method static setTrustedHosts(array $hostPatterns)
 * @method static array getTrustedHosts()
 * @method static string normalizeQueryString(?string $qs)
 * @method static enableHttpMethodParameterOverride()
 * @method static bool getHttpMethodParameterOverride()
 * @method mixed get(string $key, mixed $default = null)
 * @method Symfony\Component\HttpFoundation\Session\SessionInterface getSession()
 * @method bool hasPreviousSession()
 * @method bool hasSession(bool $skipIfUninitialized = false)
 * @method setSession(Symfony\Component\HttpFoundation\Session\SessionInterface $session)
 * @method setSessionFactory(callable $factory)
 * @method array getClientIps()
 * @method ?string getClientIp()
 * @method string getScriptName()
 * @method string getPathInfo()
 * @method string getBasePath()
 * @method string getBaseUrl()
 * @method string getScheme()
 * @method string|int|null getPort()
 * @method ?string getUser()
 * @method ?string getPassword()
 * @method ?string getUserInfo()
 * @method string getHttpHost()
 * @method string getRequestUri()
 * @method string getSchemeAndHttpHost()
 * @method string getUri()
 * @method string getUriForPath(string $path)
 * @method string getRelativeUriForPath(string $path)
 * @method ?string getQueryString()
 * @method bool isSecure()
 * @method string getHost()
 * @method setMethod(string $method)
 * @method string getMethod()
 * @method string getRealMethod()
 * @method ?string getMimeType(string $format)
 * @method static array getMimeTypes(string $format)
 * @method ?string getFormat(?string $mimeType)
 * @method setFormat(?string $format, array|string $mimeTypes)
 * @method ?string getRequestFormat(?string $default = "html")
 * @method setRequestFormat(?string $format)
 * @method ?string getContentType()
 * @method setDefaultLocale(string $locale)
 * @method string getDefaultLocale()
 * @method setLocale(string $locale)
 * @method string getLocale()
 * @method bool isMethod(string $method)
 * @method bool isMethodSafe()
 * @method bool isMethodIdempotent()
 * @method bool isMethodCacheable()
 * @method ?string getProtocolVersion()
 * @method getContent(bool $asResource = false)
 * @method array toArray()
 * @method array getETags()
 * @method bool isNoCache()
 * @method ?string getPreferredFormat(?string $default = "html")
 * @method ?string getPreferredLanguage(?array $locales = null)
 * @method array getLanguages()
 * @method array getCharsets()
 * @method array getEncodings()
 * @method array getAcceptableContentTypes()
 * @method bool isXmlHttpRequest()
 * @method bool preferSafeContent()
 * @method bool isFromTrustedProxy()
 *
 * @see \Symfony\Component\HttpFoundation\Request
 */
class Request extends \Rainte\PHP\Facades\AbstractFacade
{
    /**
     * @inheritdoc
     */
    protected $class = \Rainte\PHP\Providers\RequestProvider::class;
}
